<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd">

	<!-- DispatcherServlet Context: defines this servlet's request-processing infrastructure -->
	
	<!-- Enables the Spring MVC @Controller programming model -->
	<annotation-driven />

	<!-- Handles HTTP GET requests for /resources/** by efficiently serving up static resources in the ${webappRoot}/resources directory -->
	<!--  
	주로 이미지나 js, css파일과 같은 외부자원을 해당 디렉토리에
	저장하게 된다. 매핑명은 개발자가 변경할 수 있다.
	-->
	<resources mapping="/resources/**" location="/resources/" />
	<resources mapping="/images/**" location="/resources/" />

	<!-- Resolves views selected for rendering by @Controllers to .jsp resources in the /WEB-INF/views directory -->
	<!--  
	컨트롤러에서 비즈니스로직을 수행한후 View의 경로를 반환하면 
	ViewResolver가 해당 뷰의 경로를 조립한다.
	  [prefix]                        [suffix]
	/WEB-INF/views/ + 컨트롤러반환값 + .jsp
	위와같이 조립한 후 웹브라우저에 해당 View를 로드한다.
	컨트롤러는 View를 호출하기 전 출력할 내용을 Model에 저장한다.
	-->
	<beans:bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<beans:property name="prefix" value="/WEB-INF/views/" />
		<beans:property name="suffix" value=".jsp" />
	</beans:bean>
	
	<!--  
	SpringMVC로 요청이 들어오면 제일 먼저 아래 설정된 기본패키지를 
	검색(scan) 한 후 @Controller 어노테이션이 설정된 클래스를 찾아
	요청명에 해당하는 메소드를 실행한다.
	-->
	<context:component-scan base-package="com.koreavc.k08spring" />
	
	<beans:bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<beans:property name="maxUploadSize" value="1000000000"/>		
	</beans:bean>
	<beans:bean id="fileDownloadView" class="util.FileDownLoadView"/>
	<beans:bean id="fileViewResolver" class="org.springframework.web.servlet.view.BeanNameViewResolver">
		<beans:property name="order" value="0"/>
	</beans:bean>
	<!-- Spring-JDBC를 통한 오라클 DB연결 -->
	<beans:bean name="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
		<beans:property name="driverClassName" value="oracle.jdbc.OracleDriver"/>
		<beans:property name="url" value="jdbc:oracle:thin:@localhost:1521:orcl"/>
		<beans:property name="username" value="korea"/>	
		<beans:property name="password" value="1234"/>	
	</beans:bean>
	<!-- Mybatis 빈 생성 -->
	<beans:bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<beans:property name="dataSource" ref="dataSource"/>
		<beans:property name="mapperLocations" value="classpath:mybatis/mapper/*.xml"/>
	</beans:bean>
	<beans:bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate">
		<beans:constructor-arg index="0" ref="sqlSessionFactory" />
	</beans:bean>
	
	
</beans:beans>
